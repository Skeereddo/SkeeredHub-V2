local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

-- common_utils.lua
local CommonUtils = {}

-- Fly functionality
function CommonUtils.Fly()
    local speed = 50
    local flyToggled = false
    local c, h, bv, bav, cam
    local p = Players.LocalPlayer
    local buttons = {W = false, S = false, A = false, D = false, Moving = false}

    local function startFly()
        if not p.Character or not p.Character.Head or flyToggled then return end
        c = p.Character
        h = c.Humanoid
        h.PlatformStand = true
        cam = workspace.CurrentCamera
        bv = Instance.new("BodyVelocity")
        bv:AddTag("Whitelisted")
        bav = Instance.new("BodyAngularVelocity")
        bv.Velocity, bv.MaxForce, bv.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
        bav.AngularVelocity, bav.MaxTorque, bav.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
        bv.Parent = c.Head
        bav.Parent = c.Head
        flyToggled = true
        h.Died:connect(function() flying = false end)
    end

    local function endFly()
        if not p.Character or not flyToggled then return end
        h.PlatformStand = false
        bv:Destroy()
        bav:Destroy()
        flyToggled = false
    end

    game:GetService("UserInputService").InputBegan:Connect(function(input, GPE)
        if GPE then return end
        for i, e in pairs(buttons) do
            if i ~= "Moving" and input.KeyCode == Enum.KeyCode[i] then
                buttons[i] = true
                buttons.Moving = true
            end
        end
    end)

    game:GetService("UserInputService").InputEnded:Connect(function(input, GPE)
        if GPE then return end
        local a = false
        for i, e in pairs(buttons) do
            if i ~= "Moving" then
                if input.KeyCode == Enum.KeyCode[i] then
                    buttons[i] = false
                end
                if buttons[i] then a = true end
            end
        end
        buttons.Moving = a
    end)

    local setVec = function (vec)
        return vec * (speed / vec.Magnitude)
    end

    game:GetService("RunService").Heartbeat:connect(function(step) 
        if flyToggled and c and c.PrimaryPart then
            local p = c.PrimaryPart.Position
            local cf = cam.CFrame
            local ax, ay, az = cf:toEulerAnglesXYZ()
            c:SetPrimaryPartCFrame(CFrame.new(p.x, p.y, p.z) * CFrame.Angles(ax, ay, az))
            if buttons.Moving then
                local t = Vector3.new()
                if buttons.W then t = t + (setVec(cf.lookVector)) end
                if buttons.S then t = t - (setVec(cf.lookVector)) end
                if buttons.A then t = t - (setVec(cf.rightVector)) end
                if buttons.D then t = t + (setVec(cf.rightVector)) end
                c:TranslateBy(t * step)
            end
        end
    end)

    return {
        Activate = startFly,
        Deactivate = endFly,
        SetSpeed = function(newSpeed) speed = newSpeed end
    }
end

-- Noclip functionality
function CommonUtils.Noclip()
    local noclipEnabled = false
    local connection

    local function loop()
        if noclipEnabled then
            for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    end

    return {
        Activate = function()
            noclipEnabled = true
            connection = game:GetService("RunService").Stepped:Connect(loop)
        end,
        Deactivate = function()
            noclipEnabled = false
            if connection then connection:Disconnect() end
            game:GetService("Players").LocalPlayer.Character.Humanoid:ChangeState(7)
        end
    }
end

-- Walkspeed functionality
function CommonUtils.Walkspeed()
    local enabled = false
    local walkSpeed = 16
    local connection

    local function updateSpeed()
        if not enabled or not Players.LocalPlayer.Character then return end
        local HRP = Players.LocalPlayer.Character.HumanoidRootPart
        local C = workspace.CurrentCamera
        local LV = C.CFrame.LookVector
        local RV = C.CFrame.RightVector

        -- Reset movement vectors each frame
        local moveDirection = Vector3.new(0, 0, 0)
        
        -- Check all pressed keys simultaneously
        local W, A, S, D = false, false, false, false
        for _, v in pairs(UIS:GetKeysPressed()) do
            if v.KeyCode == Enum.KeyCode.W then W = true end
            if v.KeyCode == Enum.KeyCode.A then A = true end
            if v.KeyCode == Enum.KeyCode.S then S = true end
            if v.KeyCode == Enum.KeyCode.D then D = true end
        end

        -- Combine movement vectors
        if W then moveDirection += LV end
        if S then moveDirection -= LV end
        if A then moveDirection -= RV end
        if D then moveDirection += RV end

        -- Normalize and apply speed
        if moveDirection.Magnitude > 0 then
            moveDirection = moveDirection.Unit * walkSpeed
        end

        -- Preserve vertical velocity (gravity)
        HRP.Velocity = Vector3.new(moveDirection.X, HRP.Velocity.Y, moveDirection.Z)
    end

    return {
        Activate = function()
            enabled = true
            connection = RS.RenderStepped:Connect(updateSpeed)
        end,
        Deactivate = function()
            enabled = false
            if connection then
                connection:Disconnect()
                connection = nil
            end
            -- Reset velocity when deactivated
            if Players.LocalPlayer.Character and Players.LocalPlayer.Character.PrimaryPart then
                Players.LocalPlayer.Character.PrimaryPart.Velocity = Vector3.new(0, 0, 0)
            end
        end,
        SetSpeed = function(newSpeed) walkSpeed = newSpeed end
    }
end

-- TweenTo functionality
function CommonUtils.TweenTo()
    local activeTween = nil
    
    local function CancelTween()
        if activeTween then
            activeTween:Destroy()
            activeTween = nil
            workspace.Gravity = 196.2
        end
    end

    local function TweenTo(target, speed, options)
        options = options or {}
        local offset = options.Offset or Vector3.new(0, 0, -5)  -- Default offset 5 units back
        local faceTarget = options.FaceTarget or true
        local noFall = options.NoFall or false

        -- Validate target
        if not target or not target:IsDescendantOf(workspace) then
            return false, "Invalid target"
        end

        -- Get target position
        local targetPosition
        if target:IsA("Model") then
            targetPosition = target.PrimaryPart and target.PrimaryPart.Position or target:GetBoundingBox().Position
        else
            targetPosition = target.Position
        end

        -- Get character parts
        local character = Players.LocalPlayer.Character
        if not character or not character.HumanoidRootPart then
            return false, "Character not found"
        end
        local hrp = character.HumanoidRootPart

        -- Calculate destination
        local destination = targetPosition + offset
        local distance = (hrp.Position - destination).Magnitude
        local duration = distance / speed

        if noFall then
              workspace.Gravity = 0
        end

        -- Create tween
        local tweenInfo = TweenInfo.new(
            duration,
            Enum.EasingStyle.Linear,
            Enum.EasingDirection.Out,
            0,
            false,
            0
        )

        -- Cancel any existing tween
        CancelTween()

        -- Create and play tween
        activeTween = TweenService:Create(hrp, tweenInfo, {
            CFrame = faceTarget and CFrame.lookAt(destination, targetPosition) or CFrame.new(destination)
        })
        
        activeTween:Play()

        activeTween.Completed:Connect(function()
            if noFall then   
                workspace.Gravity = 196.2
            end
            activeTween:Destroy()
        end)
        
        return {
            Cancel = CancelTween,
            Completed = activeTween.Completed,
            Duration = duration,
        }
    end

    return {
        TweenTo = TweenTo,
        CancelTween = CancelTween
    }
end

return CommonUtils
